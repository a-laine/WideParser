predefined char:
  c_uri: ns-uri-char
  c_tag: ns-tag-char # ns-uri-char - "!,[]"
  c_anchor: ns-anchor-char # all - ws - ",[]{}"

tokens:
  t_comment_caracter: "#" # ws before
  t_map_key_delimiter: ":" # ws after
  t_map_element_indicator: "?" # ws after
  t_seq_element_indicator: "-" # ws after
  t_flow_map_begin: "{"
  t_flow_map_end: "}"
  t_flow_seq_begin: "["
  t_flow_seq_end: "]"
  t_flow_delimiter: ","
  t_block_scalar_litteral: "|"
  t_block_scalar_folded: ">"
  t_block_scalar_number: "[0-9]"
  t_block_scalar_chomping: "[+]|[-]"
  t_double_quote: "\""
  t_single_quote: "'"
  t_anchor: "&{c_anchor}*"
  t_alias: "*{c_anchor}*"
  t_tag: "!<{c_uri}*>" | "!{c_tag}*" | "!([0-9]|[a-zA-Z]|[-])*!{c_tag}*"
  t_new_line: "\r|\n|\r\n|{EOF}"  # LR CR EOF
  t_empty_value: ""
  --ignored--: " |\t" # except for indentation or scalar content
  --comments--: "#[^{t_new_line}]*{t_new_line}" # ws before, comments are not allowed in scalars

type tokens:
  tt_null: "null" | "Null" | "NULL" | "~"
  tt_true: "true" | "True" | "TRUE"
  tt_false: "false" | "False" | "FALSE"
  tt_int: "[+-]?[0-9]+"
  tt_int_oct: "0o[0-7]+"
  tt_int_hex: "0x[0-9A-Fa-f]+"
  tt_int_bin: "0b[01]+"
  tt_float: "[+-]?((\.[0-9]+)|([0-9]+(\.[0-9]*)?))([eE][+-]?[0-9]+)?"
  tt_inf: "[+-]?\.(inf)|(Inf)|(INF)"
  tt_nan: "[+-]?\.(nan)|(NaN)|(NAN)"
  




generic syntax:
  DOCUMENT: t_indent? NODE
  NODE: (BLOCK_MAP | BLOCK_SEQ | BLOCK_SCALAR) t_new_line
  NODE: (FLOW_MAP | FLOW_SEQ | FLOW_SCALAR_EMPTY) t_new_line
  BLOCK_MAP: BLOCK_MAP_ENTRY BLOCK_MAP?
  BLOCK_SEQ: BLOCK_SEQ_ENTRY BLOCK_SEQ?
  BLOCK_MAP_ENTRY: FLOW_SCALAR t_map_key_delimiter t_indent NODE t_unindent
  BLOCK_MAP_ENTRY: t_map_element_indicator t_indent NODE t_unindent t_map_key_delimiter t_indent NODE t_unindent
  BLOCK_SEQ_ENTRY: t_seq_element_indicator t_indent NODE t_unindent
  BLOCK_SCALAR: t_block_scalar_litteral BLOCK_SCALAR_HEADERS? t_new_line BLOCK_SCALAR_LITTERAL t_block_scalar_chomping
  BLOCK_SCALAR: t_block_scalar_folded BLOCK_SCALAR_HEADERS? t_new_line BLOCK_SCALAR_FOLDED t_block_scalar_chomping
  BLOCK_SCALAR_LITTERAL: t_block_litteral_folded_lines? t_content_text BLOCK_SCALAR_LITTERAL?
  BLOCK_SCALAR_FOLDED: t_block_folded_folded_lines? t_content_text BLOCK_SCALAR_FOLDED?
  FLOW_SCALAR_EMPTY: t_empty_value |Â FLOW_SCALAR
  FLOW_SCALAR: t_alias | PLAIN_SCALAR
  FLOW_SCALAR: t_double_quote QUOTED_SCALAR(t_double_quote) t_double_quote | t_single_quote QUOTED_SCALAR(t_single_quote) t_single_quote
  QUOTED_SCALAR(quote): t_quoted_content(quote) t_flow_folded_lines? DQ_SCALAR?
  PLAIN_SCALAR: t_plain_content t_flow_folded_lines? PLAIN_SCALAR?
  FLOW_MAP: t_flow_map_begin FLOW_LINE_BREAK? FLOW_MAP_CONTENT? t_flow_map_end
  FLOW_MAP_CONTENT: FLOW_MAP_PAIR FLOW_LINE_BREAK? ( t_flow_delimiter FLOW_LINE_BREAK? FLOW_MAP_CONTENT? )?
  FLOW_SEQ: t_flow_seq_begin FLOW_LINE_BREAK? FLOW_SEQ_CONTENT? t_flow_seq_end
  FLOW_SEQ_CONTENT: (FLOW_PAIR | FLOW_MAP | FLOW_SEQ | FLOW_SCALAR) FLOW_LINE_BREAK? ( t_flow_delimiter FLOW_LINE_BREAK? FLOW_SEQ_CONTENT? )?
  FLOW_MAP_PAIR: ...
  FLOW_PAIR: ...
  FLOW_LINE_BREAK: ...


not defined:
  - t_indent, t_unindent
  - t_block_litteral_folded_lines, t_block_folded_folded_lines
  - t_block_scalar_chomping, t_content_text
  - t_quoted_content, t_plain_content, t_flow_folded_lines



other syntax:
  INDENT: "( |\t)*" # t_indent t_unindent
  NODE_PROPERTIES: (t_anchor t_tag?) | (t_tag t_anchor?) #TODO
  BLOCK_SCALAR_HEADERS: ( (t_block_scalar_number t_block_scalar_chomping?) | (t_block_scalar_chomping t_block_scalar_number?) )?
  DIRECTIVES: ...


scalar content:
  BLOCK_SCALAR_LITTERAL:
    - t_new_line is normalized into "\n"
    - empty lines are normalized into "\n"
  BLOCK_SCALAR_FOLDED:
    - between 2 normal lines :
      - t_new_line is folded into " " if followed by a normal line
      - t_new_line is discared if followed by an empty line
      - empty lines are nomalized into "\n" 
    - between 2 others:
      - t_new_line is normalized into "\n"
      - empty lines are normalized into "\n"
  FLOW_SCALAR:
    - t_new_line is folded into " " if followed by a normal line
    - t_new_line is discared if followed by an empty line
    - empty lines are nomalized into "\n"
    - chomping is strip
  CHOMPING:
    strip: final t_new_line and following is discared
    clip: final t_new_line is preserved but following is discared
    keep: final t_new_line and following empty lines are normalized into "\n"

